package org.bcos.credit.web3j;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.crypto.EncryptType;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class CreditSignersData extends Contract {
    public static final String[] BINARY_ARRAY = {"","","0283529160200191611132565b820191906000526020600020905b81548152906001019060200180831161111557829003601f168201915b50509a505050505050505050505060405180910390a1600091505b509392505050565b8060038190555050565b606080600080606080606080600060606000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa69efbd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156111f757600080fd5b505af115801561120b573d6000803e3d6000fd5b505050506040513d602081101561122157600080fd5b81019080805190602001909291905050509250826040519080825280602002602001820160405280156112635781602001602082028038833980820191505090505b509150600090505b8281101561139657600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ffefe4e826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561130457600080fd5b505af1158015611318573d6000803e3d6000fd5b505050506040513d602081101561132e57600080fd5b8101908080519060200190929190505050828281518110151561134d57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808060010191505061126b565b60006001600260009054906101000a900460ff1660035460046005600688878054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114495780601f1061141e57610100808354040283529160200191611449565b820191906000526020600020905b81548152906001019060200180831161142c57829003601f168201915b50505050509750868054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114e55780601f106114ba576101008083540402835291602001916114e5565b820191906000526020600020905b8154815290600101906020018083116114c857829003601f168201915b505050505096508380548060200260200160405190810160405280929190818152602001828054801561155d57602002820191906000526020600020906000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116115265790505b50505050509350828054806020026020016040519081016040528092919081815260200182805480156115b357602002820191906000526020600020905b8154600019168152602001906001019080831161159b575b505050505092508180548060200260200160405190810160405280929190818152602001828054801561160957602002820191906000526020600020905b815460001916815260200190600101908083116115f1575b505050505091509a509a509a509a509a509a509a509a505050509091929394959697565b6060600060606000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa69efbd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156116bb57600080fd5b505af11580156116cf573d6000803e3d6000fd5b505050506040513d60208110156116e557600080fd5b81019080805190602001909291905050509250826040519080825280602002602001820160405280156117275781602001602082028038833980820191505090505b509150600090505b8281101561185a57600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ffefe4e826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156117c857600080fd5b505af11580156117dc573d6000803e3d6000fd5b505050506040513d60208110156117f257600080fd5b8101908080519060200190929190505050828281518110151561181157fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808060010191505061172f565b81935050505090565b80600090805190602001906118799291906119b2565b5050565b80600260006101000a81548160ff02191690831515021790555050565b6000600260009054906101000a900460ff16905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363a9c3d7836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561197057600080fd5b505af1158015611984573d6000803e3d6000fd5b505050506040513d602081101561199a57600080fd5b81019080805190602001909291905050509050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119f357805160ff1916838001178555611a21565b82800160010185558215611a21579182015b82811115611a20578251825591602001919060010190611a05565b5b509050611a2e9190611a32565b5090565b611a5491905b80821115611a50576000816000905550600101611a38565b5090565b905600a165627a7a7230582054062bcb3fee9f8039f3760c2070279080162013b0e702de8601d9d407d8e7030029a165627a7a7230582003f4939761db315a7d42f12bfaf240db8037ad283ed04bab11937e29b4db075c0029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"verify\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSigners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"grd\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"p\",\"type\":\"bool\"},{\"name\":\"vl\",\"type\":\"int256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"newCredit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSignersSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"creditSigners\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"newCreditEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String[] SM_BINARY_ARRAY = {"","","16141561150b578460ff1660048281548110151561111457fe5b90600052602060002090602091828204019190069054906101000a900460ff1660ff161480156111645750836000191660058281548110151561115357fe5b906000526020600020015460001916145b80156111905750826000191660068281548110151561117f57fe5b906000526020600020015460001916145b15611336577f9b6a183ddf0dc8937728321d2945b58b67913f7fed84f80bea394fa3871d83d560006001600260009054906101000a900460ff16600354898989604051808060200180602001881515151581526020018781526020018660ff1660ff1681526020018560001916600019168152602001846000191660001916815260200183810383528a8181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156112955780601f1061126a57610100808354040283529160200191611295565b820191906000526020600020905b81548152906001019060200180831161127857829003601f168201915b50508381038252898181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156113185780601f106112ed57610100808354040283529160200191611318565b820191906000526020600020905b8154815290600101906020018083116112fb57829003601f168201915b5050995050505050505050505060405180910390a1600191506119aa565b7f4045fab853fee6a9f979558bd0c6dfeaa8d99f25031547b10f5f0900bf8d8e9760006001600260009054906101000a900460ff1660035489898933604051808060200180602001891515151581526020018881526020018760ff1660ff168152602001866000191660001916815260200185600019166000191681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b8181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156114695780601f1061143e57610100808354040283529160200191611469565b820191906000526020600020905b81548152906001019060200180831161144c57829003601f168201915b505083810382528a8181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156114ec5780601f106114c1576101008083540402835291602001916114ec565b820191906000526020600020905b8154815290600101906020018083116114cf57829003601f168201915b50509a505050505050505050505060405180910390a1600091506119aa565b8080600101915050611087565b61152133610a82565b156117d957600485908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908360ff160217905550506005849080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550600683908060018154018082558091505090600182039060005260206000200160009091929091909150906000191690555060073390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550507ffd5561a0aa49d62a65b99dcede31328c08bc33de98888c64d5b345999abe920a60006001600260009054906101000a900460ff16600354898989604051808060200180602001881515151581526020018781526020018660ff1660ff1681526020018560001916600019168152602001846000191660001916815260200183810383528a8181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156117385780601f1061170d57610100808354040283529160200191611738565b820191906000526020600020905b81548152906001019060200180831161171b57829003601f168201915b50508381038252898181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156117bb5780601f10611790576101008083540402835291602001916117bb565b820191906000526020600020905b81548152906001019060200180831161179e57829003601f168201915b5050995050505050505050505060405180910390a1600191506119aa565b7f49410855c5096c6e7f366715cfb60e1b3f23c1a248ab4aa7fd1ed546140e348b60006001600260009054906101000a900460ff1660035489898933604051808060200180602001891515151581526020018881526020018760ff1660ff168152602001866000191660001916815260200185600019166000191681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b81815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561190c5780601f106118e15761010080835404028352916020019161190c565b820191906000526020600020905b8154815290600101906020018083116118ef57829003601f168201915b505083810382528a81815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561198f5780601f106119645761010080835404028352916020019161198f565b820191906000526020600020905b81548152906001019060200180831161197257829003601f168201915b50509a505050505050505050505060405180910390a1600091505b509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119f357805160ff1916838001178555611a21565b82800160010185558215611a21579182015b82811115611a20578251825591602001919060010190611a05565b5b509050611a2e9190611a32565b5090565b611a5491905b80821115611a50576000816000905550600101611a38565b5090565b905600a165627a7a72305820c073e55b3a292639c6e13c3522fc90dab1bd0014765338db676660a0a5fd44f10029a165627a7a72305820a15d5567b10f6b0e4295adb3df89c353cdb9697d1e5b64c8079ef9f4f3393af90029"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String FUNC_GETSIGNER = "getSigner";

    public static final String FUNC_VERIFY = "verify";

    public static final String FUNC_GETSIGNERS = "getSigners";

    public static final String FUNC_NEWCREDIT = "newCredit";

    public static final String FUNC_GETSIGNERSSIZE = "getSignersSize";

    public static final Event NEWCREDITEVENT_EVENT = new Event("newCreditEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected CreditSignersData(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CreditSignersData(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CreditSignersData(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CreditSignersData(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static String getBinary() {
        return (EncryptType.encryptType == EncryptType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<String> getSigner(BigInteger index) {
        final Function function = new Function(FUNC_GETSIGNER, 
                Arrays.<Type>asList(new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> verify(String addr) {
        final Function function = new Function(FUNC_VERIFY, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<List> getSigners() {
        final Function function = new Function(FUNC_GETSIGNERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> newCredit(String grd, String name, Boolean p, BigInteger vl, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_NEWCREDIT, 
                Arrays.<Type>asList(new Utf8String(grd),
                new Utf8String(name),
                new Bool(p),
                new Int256(vl),
                new Uint8(v),
                new Bytes32(r),
                new Bytes32(s)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void newCredit(String grd, String name, Boolean p, BigInteger vl, BigInteger v, byte[] r, byte[] s, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_NEWCREDIT, 
                Arrays.<Type>asList(new Utf8String(grd),
                new Utf8String(name),
                new Bool(p),
                new Int256(vl),
                new Uint8(v),
                new Bytes32(r),
                new Bytes32(s)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String newCreditSeq(String grd, String name, Boolean p, BigInteger vl, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_NEWCREDIT, 
                Arrays.<Type>asList(new Utf8String(grd),
                new Utf8String(name),
                new Bool(p),
                new Int256(vl),
                new Uint8(v),
                new Bytes32(r),
                new Bytes32(s)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple7<String, String, Boolean, BigInteger, BigInteger, byte[], byte[]> getNewCreditInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWCREDIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple7<String, String, Boolean, BigInteger, BigInteger, byte[], byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (byte[]) results.get(5).getValue(), 
                (byte[]) results.get(6).getValue()
                );
    }

    public Tuple1<String> getNewCreditOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_NEWCREDIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<BigInteger> getSignersSize() {
        final Function function = new Function(FUNC_GETSIGNERSSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<NewCreditEventEventResponse> getNewCreditEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWCREDITEVENT_EVENT, transactionReceipt);
        ArrayList<NewCreditEventEventResponse> responses = new ArrayList<NewCreditEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewCreditEventEventResponse typedResponse = new NewCreditEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registernewCreditEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(NEWCREDITEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registernewCreditEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(NEWCREDITEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static CreditSignersData load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CreditSignersData(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CreditSignersData load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CreditSignersData(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CreditSignersData load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CreditSignersData(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CreditSignersData load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CreditSignersData(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CreditSignersData> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, List<String> creditSigners) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(creditSigners.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(creditSigners, Address.class))));
        return deployRemoteCall(CreditSignersData.class, web3j, credentials, contractGasProvider, getBinary(), encodedConstructor);
    }

    public static RemoteCall<CreditSignersData> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, List<String> creditSigners) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(creditSigners.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(creditSigners, Address.class))));
        return deployRemoteCall(CreditSignersData.class, web3j, transactionManager, contractGasProvider, getBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CreditSignersData> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, List<String> creditSigners) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(creditSigners.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(creditSigners, Address.class))));
        return deployRemoteCall(CreditSignersData.class, web3j, credentials, gasPrice, gasLimit, getBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CreditSignersData> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, List<String> creditSigners) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(creditSigners.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(creditSigners, Address.class))));
        return deployRemoteCall(CreditSignersData.class, web3j, transactionManager, gasPrice, gasLimit, getBinary(), encodedConstructor);
    }

    public static class NewCreditEventEventResponse {
        public Log log;

        public String addr;
    }
}
